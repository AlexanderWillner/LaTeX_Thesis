################################################################################
# * LaTeX thesis template (buildbot config)
# * @author  : Alexander willner (willner@cs.uni-bonn.de)
################################################################################


################################################################################
# Configuration
_projectName="LaTeX Thesis Template"
_projectURL="http://github.com/alexanderwillner/template/"
#_svnURL="file:///path/to/template/"
_svnURL="http://svn.example.org/template/"
_svnStable=10
_svnUsername="";
_svnPassword="";
_botName="bot-name"
_botPassword="password"
_botPort=4585
_webPort=8111
_webPath=""
_mailTo=["user@example.org"]
_mailFrom="buildbot@example.org"
_buildURL="https://build.example.org/template/"
_buildMax=5
_buildDocs="doc"
_build = {}
_build[0] = {}
_build[0]['name'] = "thesis"
_build[0]['branch'] = "thesis"
_build[1] = {}
_build[1]['name'] = "expose"
_build[1]['branch'] = "expose"
###############################################################################


################################################################################
# Init...
################################################################################
#from buildbot.buildslave import BuildSlave

c = BuildmasterConfig = {}
c['projectName'] = _projectName
c['projectURL'] = _projectURL
c['buildbotURL'] = _buildURL
#c['slaves'] = [BuildSlave(_botName, _botPassword, max_builds=_buildMax)]
c['bots'] = [(_botName, _botPassword)]
c['slavePortnum'] = _botPort
################################################################################


################################################################################
# How to invoke...
################################################################################
from buildbot.changes.pb import PBChangeSource

c['sources'] = [PBChangeSource()]
#c['change_source'] = PBChangeSource()
from buildbot.scheduler import Scheduler, Nightly
c['schedulers'] = []
for i in _build:
    c['schedulers'].append(
    	Scheduler(
    		name=_build[i]['name'],
    		branch=None,
    		treeStableTimer=_svnStable,
    		builderNames=[_build[i]['name']]
    	)
    )
################################################################################


################################################################################
# Status Reports and Notifier
################################################################################
import os
from buildbot.status.html import Waterfall
from buildbot.status.mail import MailNotifier

c['status'] = []
c['status'].append(Waterfall(http_port=_webPort, css=os.path.join(basedir, "buildbot.css")))
#c['status'].append(WebStatus(http_port=_webPort, allowForce=True))
for i in _build:
    c['status'].append(MailNotifier(
    	fromaddr=_mailFrom,
    	extraRecipients=_mailTo,
    	sendToInterestedUsers=False,
    	mode="failing",
    	categories=[_build[i]['name']],
    ))
################################################################################


################################################################################
# Steps
################################################################################
from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import Compile, ShellCommand

def step_update(factory, params):
	factory.addStep(SVN,
		baseURL=_svnURL,
		defaultBranch=params['branch'],
        mode="update"
	)
	return factory

def append_factory(factory, params):
	factory.addStep(Compile,
			warnOnWarnings=True,
			haltOnFailure=False,
			command=params['command'],
			description=params['description'],
			descriptionDone=params['description'],
            logfiles={"log": "build.sh.log"},
			)
	return factory

def append_default_factories(factory):
    params['command'] = "./build.sh -c"
    params['description'] = "cleanup"
    factory = append_factory(factory, params)
    params['command'] = "./build.sh -g"
    params['description'] = "image generation"
    factory = append_factory(factory, params)
    params['command'] = "./build.sh -b"
    params['description'] = "PDF generation"
    factory = append_factory(factory, params)
    # use: MasterShellCommand and upload etc. instead
    params['command'] = "cp template.pdf /path/to/www/thesis_willner.pdf; chmod 666 /path/to/www/thesis_willner.pdf"
    params['description'] = "PDF publication"
    factory = append_factory(factory, params)
    params['command'] = "./build.sh -v"
    params['description'] = "validation"
    factory = append_factory(factory, params)
    return factory
################################################################################


################################################################################
# Builders
################################################################################
c['builders'] = []

for i in _build:
    params = {}
    buildfactory = factory.BuildFactory()
    params['branch'] = _build[i]['branch']
    buildfactory = step_update(buildfactory, params)
    buildfactory = append_default_factories(buildfactory)
    builder = {
    	'name' : _build[i]['name'],
    	'slavename' : _botName,
    	'builddir' : _build[i]['name'],
    	'factory' : buildfactory,
    	'category' : _build[i]['name'],
    }
    c['builders'].append(builder)
################################################################################
