#===============================================================================
# * LaTeX thesis template (build library)
# * @author  : Alexander willner (willner@cs.uni-bonn.de)
#===============================================================================

#===============================================================================
# Method declaration
#===============================================================================
function startLogging() {
    if [ "$DEBUG" -eq "0" ]; then
        touch "$FILE_LOG";
        exec 6>&1        # Saves stdout in file descriptor #6.
        exec 7>&2        # Saves stderr in file descriptor #7.
        exec 1> $FILE_LOG # stdout replaced with log file.
        exec 2> $FILE_LOG # stderr replaced with log file.
    fi;
}

function resetLogging() {
    :> "$FILE_LOG";
}

function endLogging() {
    if [ "$DEBUG" -eq "0" ]; then
        exec 1>&6 6>&-  # Restore stdout and close file descriptor #6.
        exec 2>&7 7>&-  # Restore stderr and close file descriptor #7.
    fi;
}

function doDefaultProject() {
    if [ "$verify" ] || [ "$build" ] || [ "$quick" ] || \
       [ "$clean" ] || [ "$spelling" ] || [ "$eval" ] || [ "$generate" ]; then

        if [ "$spelling" ]; then
            checkEnvironment "$REQ_APPLICATIONS";
        	checkSpellingInteractive "$DIR_SRC" "$DIR_RES" "$LANG";
        	exit $?;
        fi;

        if [ "$eval" ]; then
            checkEnvironment "$REQ_APPLICATIONS";
        	doEvaluation "$DIR_SCR" "$DIR_ANA";
        	exit $?;
        fi;

    	doSetup "$REQ_DIRS" "$FILE_LOG";

    	if [ "$clean" ]; then
        	doCleanup "$DIR_TMP";
        fi;

        if [ "$generate" ]; then
            checkEnvironment "$REQ_APPLICATIONS";
            doGraphviz "$DIR_IMG";
            doGnuPlot "$DIR_IMG";
            doPlotR "$DIR_IMG";
        fi;

        if [ "$verify" ]; then
            checkProject "$DIR_SRC" "$DIR_TMP" "$DIR_RES" \
                 "$FILE_ABSTRACT" "$FILE_INTRO" "$FILE_CONFIG" \
                 "$FILE_MAIN" "$FILE_BIB" \
                 "$LANG"
        	exit $?;
        fi;

        if [ "$build" ]; then
        	doLatex "$DIR_TMP" "$FILE_MAIN";
        	if [ "$DOINDEX" == "1" ]; then
        		doIndex "$DIR_TMP" "$DIR_LYT";
        	fi
        	if [ "$DOBIBTEX" == "1" ]; then
            	doBibtex "$DIR_TMP" "$FILE_MAIN" "$FILE_BIB" "$DIR_RES";
            fi
        	doLatex "$DIR_TMP" "$FILE_MAIN";
        	doLatex "$DIR_TMP" "$FILE_MAIN";
        fi;

        if [ "$quick" ] || [ "$build" ]; then
            doLatex "$DIR_TMP" "$FILE_MAIN";
            NAME=`basename $FILE_MAIN .tex`;
            pdfopt $DIR_TMP/$NAME.pdf $NAME.pdf
            echo "File created: $NAME.pdf";
        fi;
    else
        showHelp;
    fi;
}

function checkParameter() {
  SYNTAX="Syntax: $0 [-c (clean)] [-b (build)] [-q (quick build)] [-v (verify)] \
     [-s (spell checking)] [-e (run the evaluation)] [-g (generate images etc.)] \
     [-h (help)]";
  while getopts ":qchvsbeg" optname
  do
    case "$optname" in
      "q")
        quick=1;
        ;;
      "c")
        clean=1;
        ;;
      "v")
        verify=1;
        ;;
      "s")
        spelling=1;
        ;;
      "b")
        build=1;
        ;;
      "g")
        generate=1;
        ;;
      "e")
        eval=1;
        ;;
      "h")
        showHelp;
        exit;
        ;;
      ":")
        echo "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        echo "Unknown error while processing options"
        showHelp;
        exit;
        ;;
    esac
  done
}

function checkEnvironment() {
	_error="0";
    _filenames="$1";

    for filename in $_filenames; do
      if [ "`(which $filename; echo $?)|tail -n 1`" != "0" ]; then
        echo "Please install '$filename' first!";
        _error="1";
      fi;
    done;
    if [ "$_error" != "0" ]; then
        exit 1;
    fi;
}

function checkError() {
    _exitcode="$1";
	_exit="$2";
    if [ "$_exitcode" != "0" ]; then
        echo "Error: Command failed. See $FILE_LOG.";
        exit $_exitcode
    fi
}

function checkRule() {
    _list="$1";
    _filename="$2";
    _message="$3";
    _casesens="$4";
    IFS="#";
    STATE=0;

    content=`cat $_filename | perl -pe "s/%.*$//g"`;
    for word in $_list; do
      if [ "$_casesens" == "" ]; then
        found=`echo $content|perl -ne "/$word/i && print"`;
      else
        found=`echo $content|perl -ne "/$word/ && print"`;
      fi
      if [ "$found" != "" ]; then
        echo "warning: $_message '$word' in $_filename.";
        state=1;
      fi
    done

    IFS=$IFS_ORG;
    return $state;
}

function checkSpelling() {
    _filename="$1";
    _dir_resources="$2";
	_language="$3";

    found=`cat $_filename | aspell \
      --home-dir=$_dir_resources \
      --lang=$_language \
      --dont-backup --encoding=utf-8 --mode=tex --dont-tex-check-comments \
      --add-tex-command="bibliographystyle po" \
      --add-tex-command="bibliography po" \
      --add-tex-command="eqref po" \
      list`;
    if [ "$found" != "" ]; then
        echo "warning: Please add via aspell or correct in '$_filename' the word(s): $found";
        return 1
    fi
}

function checkSpellingInteractive() {
	_dir_sources="$1";
	_dir_resources="$2";
	_language="$3";
    for filename in `ls $_dir_sources`; do
      aspell --home-dir=$_dir_resources \
        --lang=$_language \
        --dont-backup --encoding=utf-8 --mode=tex --dont-tex-check-comments \
        --add-tex-command="bibliographystyle po" \
        --add-tex-command="bibliography po" \
        --add-tex-command="eqref po" \
        check $_dir_sources/$filename;
    done
}

function checkProject() {
	_dir_sources="$1";
	_dir_tmp="$2";
	_dir_resources="$3";
	_file_abstract="$4";
	_file_introduction="$5";
	_file_config="$6";
	_file_main="$7";
	_file_bib="$8";
	_language="$9";
	_error=0;
    echo -n "Checking orthography...";
	if [ "$DOSPELLCHECK" == "1" ]; then
      for file in `ls $_dir_sources/*.tex`; do
        checkSpelling "$file" $_dir_resources $_language;
        if [ "$?" != "0" ]; then _error=1; fi
      done
    fi
    for file in `ls $_dir_sources/*.tex`; do
      checkRule "$MISTAKES" "$file" "Double checkRule spelling: ";
      if [ "$?" != "0" ]; then _error=1; fi
    done
    for file in `ls $_dir_sources/*.tex`; do
      checkRule "$MISTAKES_CS" "$file" "Double checkRule spelling: " true;
      if [ "$?" != "0" ]; then _error=1; fi
    done
    echo "done";
    echo -n "Checking hyphens...";
    for file in `ls $_dir_sources/*.tex`; do
      checkRule "$HYPHENS" "$file" "These prepositions should not be written with a hyphen: ";
      if [ "$?" != "0" ]; then _error=1; fi
    done
    echo "done";
    echo -n "Checking commas...";
    for file in `ls $_dir_sources/*.tex`; do
      checkRule "$COMMAS" "$file" "I think we need a comma here: ";
      if [ "$?" != "0" ]; then _error=1; fi
    done
    echo "done";
    echo -n "Checking references...";
    for file in `ls $_dir_sources/*.tex`; do
      checkRule "$REFS" "$file" "References must be written in uppercase: " true;
      if [ "$?" != "0" ]; then _error=1; fi
    done
    echo "done";
    echo -n "Checking todos...";
    for file in `ls $_dir_sources/*.tex`; do
      checkRule "$TODOS" "$file" "";
      if [ "$?" != "0" ]; then _error=1; fi
    done
    echo "done";
    echo -n "Checking general...";
    for file in `ls $_dir_sources/*.tex`; do
      checkRule "$AVOID" "$file" "Avoid";
      if [ "$?" != "0" ]; then _error=1; fi
    done
    echo "done";
	echo -n "Checking macros...";
    for file in `ls $_dir_sources/*.tex`; do
      checkRule "$MACROS" "$file" "Use an LaTeX macro instead" true;
      if [ "$?" != "0" ]; then _error=1; fi
    done
    echo "done";
    echo -n "Checking abstract...";
    checkRule "$BAD_ABSTRACT" "$_file_abstract" "Avoid";
      if [ "$?" != "0" ]; then _error=1; fi
    WORDS=`cat $_filename | perl -pe "s/%.*$//g" | wc -w`;
    if [ $WORDS -lt "$MIN_ABSTRACT" ] || [ $WORDS -gt "$MAX_ABSTRACT" ]; then
      echo "warning: you've $WORDS words in your abstract [Should be: $MIN_ABSTRACT-$MAX_ABSTRACT].";
      _error=1
    fi
    echo "done";
    echo -n "Checking introduction...";
    checkRule "$BAD_INTRO" "$_file_introduction" "Avoid";
    if [ "$?" != "0" ]; then _error=1; fi
    echo "done";
    echo -n "Checking config...";
    checkRule "$BAD_CONFIG" "$_file_config" "Avoid";
    if [ "$?" != "0" ]; then _error=1; fi
    checkRule "$BAD_CONFIG" "$_dir_resources/config/default.tex" "Avoid";
    if [ "$?" != "0" ]; then _error=1; fi
    checkRule "$BAD_CONFIG" "$_dir_resources/config/pdfmetadata.tex" "Avoid";
    if [ "$?" != "0" ]; then _error=1; fi
    echo "done";
    echo -n "Checking latex (l2tabu)...";
    checkRule "$L2TABU" "$_file_config" "Avoid";
    if [ "$?" != "0" ]; then _error=1; fi
    for file in `ls $_dir_sources/*.tex`; do
      checkRule "$L2TABU" "$file" "Avoid";
      if [ "$?" != "0" ]; then _error=1; fi
    done
    echo "done";
    echo "Checking latex/bibtex (compiling)...";
    doLatex $_dir_tmp $_file_main
	if [ "$DOBIBTEX" == "1" ]; then
        doBibtex $_dir_tmp $_file_main $_file_bib
    fi
    doLatex $_dir_tmp $_file_main
	resetLogging;
	doLatex $_dir_tmp $_file_main
	if [ "$?" != "0" ]; then _error=1; fi
	showWarnings;
	if [ "$?" != "0" ]; then _error=1; fi
	return $_error
    #---------------------------------------------------------------------------
}

function showHelp() {
    echo $SYNTAX;
}

function showWarnings() {
    #WARNINGS=`grep -i warning $FILE_LOG|grep -v ifpdftex`;
	WARNINGS=`grep -iE "^! |Warning|Overfull|Underfull" $FILE_LOG|grep -vE "addtolists|tocbasic|selectfont|fontenc|pickup@font|scrhack|float@listhead|minitoc|[2]|expanded"`;

    if [ "$WARNINGS" != "" ]; then
      echo "-------------";
      cat "$WARNINGS";
      echo "-------------";
      return 1
    fi
}

function doSetup() {
    _pathnames="$1";

    for pathname in $_pathnames; do
        mkdir -p "$pathname";
    done
    resetLogging;
}

function doCleanup() {
	_dir_tmp="$1";

    echo -n "Cleaning up...";
	rm -rf "$_dir_tmp" 2> /dev/null;
    if [ "$isNotGnu" == "1" ]; then
      find . -name .git -regex ".*\.\(bak\|aux\|bbl\|blg\|idx\|out\|new\|lot\|lof\|toc\|log\|ilg\|gls\|glo\|ind\|slg\|syg\|lol\|syi\|maf\|mtc.*\)$" -exec rm {} \;
    else
      find -E . -name .git -regex ".*\.(bak|aux|bbl|blg|idx|out|new|lot|lof|toc|log|ilg|ind|gls|glo|slg|syg|syi|lol|maf|mtc.*)$" -exec rm {} \;
    fi
    echo "done";
}

function doLatex() {
	_dir_tmp="$1";
	_file_main="$2";
	echo -n "Running LaTeX...";
    startLogging;
    pdflatex \
	  -interaction=nonstopmode \
	   -file-line-error \
	  -output-directory $_dir_tmp \
	  $_file_main
	errorlevel=$?
	endLogging;
	checkError $errorlevel;
	echo "done";
}

function doBibtex() {
	_dir_tmp="$1";
	_file_main="$2";
    _file_bib="$3";
    _dir_res="$4";
    _ext="$5";
    echo -n "Running BibTeX...";
    startLogging;
    cp -r "$_dir_res" "$_dir_tmp";
    cp "$_file_bib" "$_dir_tmp";
    cp *.bib "$_dir_tmp";
    cp *.bst "$_dir_tmp";
    cp *.cls "$_dir_tmp";
    cd "$_dir_tmp";
    file_bibtex=`basename $_file_main .tex`"$_ext";
    bibtex $file_bibtex;
    errorlevel=$?
    found=`bibtex $file_bibtex | grep -iE "warn|illegal|repeated|skipping|couldn't"`
    cd -
	endLogging;
    if [ "$found" != "" ]; then
    	echo "warning: BibTeX: $found";
    fi
	checkError $errorlevel;
	echo "done";
}

function doIndex() {
	_dir_tmp="$1";
	_dir_layout="$2";
    echo -n "Running Index...";
    startLogging;
	file_index=`basename $_file_main .tex`;
    makeindex -g -s $_dir_layout/index.ist "$_dir_tmp/$file_index";
    errorlevel=$?
	endLogging;
	checkError $errorlevel;
	echo "done";
}

function doGraphviz() {
	_dir_img="$1";
	errorlevel=0;
	echo -n "Graphviz...";
	startLogging;
	for gv in `ls $_dir_img/*.gv`; do
        file=${gv##*/}
        file=${file%%.*}
		dot -Tps2 -o $_dir_img/$file.ps $gv;
		ps2pdf $_dir_img/$file.ps $_dir_img/$file.pdf
		rm $_dir_img/$file.ps
		errorlevel=$?
		if [ "$errorlevel" != "0" ]; then break; fi
	done
	endLogging;
	checkError $errorlevel;
	echo "done";
}

function doGnuPlot() {
	_dir_img="$1";
	errorlevel=0;
	echo -n "Gnuplot...";
	startLogging;
	cd $_dir_img;
	for plt in `ls *.plt`; do
		gnuplot $plt;
		errorlevel=$?
		if [ "$errorlevel" != "0" ]; then break; fi
	done
	cd -
	endLogging;
	checkError $errorlevel;
	echo "done";
}

function doPlotR() {
	_dir_img="$1";
	errorlevel=0;
	echo -n "R...";
    startLogging;
    cd $_dir_img;
    for r in `ls *.R`; do
    	Rscript $r;
		errorlevel=$?
		if [ "$errorlevel" != "0" ]; then break; fi
    done
    cd -
    endLogging;
    checkError $errorlevel;
    echo "done";
}

function doEvaluation() {
	_dir_scr=$1
	_dir_ana=$2
    startLogging;
    source "$_dir_scr/workDispatcher"
    cd $_dir_ana
    _cmd='Rscript'
    for r in `ls *.R`; do
		echo $r
	done | dispatchWork
	errorlevel=$?
    cd -
    endLogging;
    checkError $errorlevel;
}
#===============================================================================


#===============================================================================
# Fetails about lints, smells, bugs, and conventions:
# * http://mirror.ctan.org/info/l2tabu/english/l2tabu.pdf
# * http://www.cs.columbia.edu/~hgs/etc/writing-style.html
# * http://www.cs.columbia.edu/~hgs/etc/writing-bugs.html
# * http://www.cs.purdue.edu/homes/dec/essay.dissertation.html
# * http://www.punctuationmadesimple.com/PMSHyphen.html
# * http://www.jr-x.de/publikationen/latex/tipps/besonderheiten.html
#===============================================================================
HYPHENS="\bpre-[^\s]+#\banti-[^\s]+#\bmacro-[^\s]+#\bmicro-[^\s]+#\bpost-[^\s]+#\bover-[^\s]+#\bsemi-[^\s]+#\bsub-[^\s]+#\bsupra-[^\s]+#\btrans-[^\s]+#\bultra-[^\s]+#\bmeta-[^\s]+#\banti-[^\s]+#\ba-[^\s]+#\bbe-[^\s]+#\bby-[^\s]+#\bdis-[^\s]+#\bfull-[^\s]+#\bhyper-[^\s]+#\bmid-[^\s]+#\bmini-[^\s]+#\bnon-[^\s]+#\bpre-[^\s]+#\bunder-[^\s]+#\bup-[^\s]+#\bante-[^\s]+#\bmulti-[^\s]+#\binfra-[^\s]+#\binter-[^\s]+#\bintra-[^\s]+";
COMMAS="However\s+#In fact\s+#Therefore\s+#Nevertheless\s+#Moreover\s+#Furthermore\s+#Still\s+#Instead\s+#Unfortunately\s+#On the one hand\s+#On the other hand\s+#[^,]\s+dass#[^.]*[^,]\s+um[^.]+zu[^.]+.";
REFS='[^\\]section[^A-Za-z\.,;\}\(]+\\#figure[^A-Za-z\.,;\}\(]+\\#equation[^A-Za-z\.,;\}\(]+\\#table[^A-Za-z\.,;\}\(]+\\';
MISTAKES='test bed#test-bed';
MISTAKES_CS='\bwebservice\b#\bweb service\b#\bMiddleware\b#\bArgon[^:]\b';
AVOID="clearly#obviously#actually#\$i-th\$#etc\.#\.e\.#e\.g\.[^,]#[^,]\s{,1}respectively#Therefore[^,]#thus[^,]#related works#following (figure\b|fig\.)#[^~](\s*)\\\ref#kbps#mbps#msec#recent advances in# don't#doesn't#we've#won't#it's#That's because#optimally#Equation(~|\s*)\\\ref#\still\s#make assumption#is a function of#is an illustration#is a requirement#utilizes#had difference#\\\$[0-9]+\\\$#\\\cite{.*}\\s\\\cite#\bgut\b#\bschlecht\b#\bschön\b#\bfurchtbar\b#\bdumm\b#\bwahr\b#\bfalsch\b#\bperfekt\b#\bideal\b#\bheutzutage\b#\bmodern\b#\bbald\b#\büberrascht\b#\bscheint\b#\bbasiert\b#\bviele\b#\beinige\b#\bähnlich\b#\bwahrscheinlich\b#\bselbstverständlich\b#\bklar\b#\bwirklich\b#\beinfach\b#\bdieses\b#\bjenes\b#\bwir\b#\bhoffentlich\b#\bbekannt\b#\bberühmt\b#\bmuss\b#\bman\b#\b\bhalt\b\b#\bimmer\b#\bsollte\b#\bbeweis\b#\bzeigt\b#\bkann\b#\bsollte\b#\bmüsste\b#\bsoon\b#\bbald\b#\bperfect\b#\bperfekt\b#\bseems\b#\bscheint\b#\blots of\b#\bkind of\b#\btype of\b#\bsomethink like\b#\bprobably\b#\balong with\b#\bwould seem to show\b#\ban ideal solution\b#\bbad\b#\bnice\b#\bstupid\b#\bmodern times\b#\btoday\b#\ba famous researcher\b#\bsimple\b#z\.B\.#d\.h\.#z\.Z\.#u\.a\."
MACROS="\bPreface\b#\bVorwort\b#\bReferences\b#\bLiteratur\b#\bBibliography\b#\bLiteraturverzeichnis\b#\bAppendix\b#\bAnhang\b#\bContents\b#\bInhaltsverzeichnis\b#\bList of Figures\b#\bAbbildungsverzeichnis\b#\bList of Tables\b#\bTabellenverzeichnis\b#\bFigure|Fig\.[^A-Za-z\.,;]+#\bAbbildung|Abb\.[^A-Za-z\.,;]+#\bTable|Tab\.[^A-Za-z\.,;]+#\bTabelle[^A-Za-z\.,;]+#\bEquation|Eq\.[^A-Za-z\.,;]+#\bSection|Seq\.[^A-Za-z\.,;]+#\bPart\b#\bTeil\b#\bencl\b#\bAnlage(n)\b#\bVerteiler\b#\bPage\b#\bSeite\b#\bsee also\b#\bsiehe auch\b";
BAD_ABSTRACT="\cite#\equation#in this paper";
BAD_INTRO="recent advances in#growth of the Internet";
TODOS="todo#fixme#tbd";
L2TABU='\\usepackage.*{a4#\\oddsidemargin#\\hoffset#\\voffset#\\baselinestretch#\\parindent=#\$\$#\\def\\#\\sloppy#{\\bf[^A-Za-z]}#{\\it#{\\rm[^A-Za-z]#{\\sc[^A-Za-z]#{\\sf[^A-Za-z]#{\\sl[^A-Za-z]#{\\tt[^A-Za-z]#\\over#\\centerline#\\usepackage.*{psfig}#\\psfig#\\usepackage.*{doublespace}#\\usepackage.*{fancyheadings}#\\usepackage.*{scrpage}#\\usepackage.*{caption}[^\[]#\\usepackage.*{isolatin1}#\\usepackage.*{umlaut}#\\usepackage.*{t1enc}#dinat.bst#\\usepackage.*{times}#\\usepackage.*{mathptm}#\\usepackage.*{pslatex}#\\usepackage.*{palatino}#\\usepackage.*{pifont}#\\usepackage.*{euler}#\\usepackage.*{ae}#\\usepackage.*{zefonts}#\\begin.*{appendix}#eqnarray#displaymath#\\graphicspath';
#===============================================================================


#===============================================================================
# Autoconfig
#===============================================================================
find -E . -maxdepth 1 > /dev/null 2>&1
isNotGnu=$?
IFS_ORG="$IFS";
FILE_LOG="$0.log";
if [ "$MIN_ABSTRACT" == "" ]; then
  MIN_ABSTRACT="100";
fi
if [ "$MAX_ABSTRACT" == "" ]; then
  MAX_ABSTRACT="150";
fi
if [ "$DOSPELLCHECK" == "" ]; then
  DOSPELLCHECK="1";
fi
export TEXINPUTS=$DIR_IMG:$TEXINPUTS
export LANGUAGE=$LANGEXT
export LANG=$LANGEXT
export LC_ALL=$LANGEXT
#===============================================================================
